"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class PullSummaryTotals {
    constructor(changes = 0, insertions = 0, deletions = 0) {
        this.changes = changes;
        this.insertions = insertions;
        this.deletions = deletions;
    }
}
class PullSummary {
    constructor() {
        this.created = [];
        this.deleted = [];
        this.files = [];
        this.deletions = {};
        this.insertions = {};
        this.summary = new PullSummaryTotals();
    }
}
exports.PullSummary = PullSummary;
const FILE_UPDATE_REGEX = /^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/;
const SUMMARY_REGEX = /(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/;
const ACTION_REGEX = /^(create|delete) mode \d+ (.+)/;
const parsers = [
    new utils_1.LineParser(FILE_UPDATE_REGEX, (result, [file, insertions, deletions]) => {
        result.files.push(file);
        if (insertions) {
            result.insertions[file] = insertions.length;
        }
        if (deletions) {
            result.deletions[file] = deletions.length;
        }
    }),
    new utils_1.LineParser(SUMMARY_REGEX, (result, [changes, , insertions, , deletions]) => {
        if (insertions !== undefined || deletions !== undefined) {
            result.summary.changes = +changes || 0;
            result.summary.insertions = +insertions || 0;
            result.summary.deletions = +deletions || 0;
            return true;
        }
        return false;
    }),
    new utils_1.LineParser(ACTION_REGEX, (summary, [action, file]) => {
        utils_1.append(summary.files, file);
        utils_1.append((action === 'create') ? summary.created : summary.deleted, file);
    }),
];
function parsePull(text, pullSummary = new PullSummary()) {
    return utils_1.parseLinesWithContent(pullSummary, parsers, text);
}
exports.parsePull = parsePull;
//# sourceMappingURL=PullSummary.js.map