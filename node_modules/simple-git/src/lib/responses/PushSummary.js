"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class PushSummaryPushed {
    constructor(local, remote, status) {
        this.local = local;
        this.remote = remote;
        this.deleted = status.includes('deleted');
        this.tag = status.includes('tag') || /^refs\/tags/.test(local);
        this.branch = !this.tag;
        this.new = status.includes('new');
        this.alreadyUpdated = !this.new;
    }
}
const parsers = [
    new utils_1.LineParser(/^Pushing to (.+)$/, (result, [repo]) => {
        result.repo = repo;
    }),
    new utils_1.LineParser(/^updating local tracking ref '(.+)'/, (result, [local]) => {
        result.ref = Object.assign(Object.assign({}, (result.ref || {})), { local });
    }),
    new utils_1.LineParser(/^[*-=]\s+([^:]+):(\S+)\s+\[(.+)]$/, (result, [local, remote, type]) => {
        result.pushed.push(new PushSummaryPushed(local, remote, type));
    }),
    new utils_1.LineParser(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/, (result, [local, remote, remoteName]) => {
        result.branch = Object.assign(Object.assign({}, (result.branch || {})), { local,
            remote,
            remoteName });
    }),
    new utils_1.LineParser(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/, (result, [local, remote, from, to]) => {
        result.update = {
            head: {
                local,
                remote,
            },
            hash: {
                from,
                to,
            },
        };
    }),
    new utils_1.LineParser(/^remote:\s*(.+)$/, (result, [text]) => {
        const message = text.trim();
        if (message) {
            result.remoteMessages.all.push(message);
        }
        return false;
    }),
    new utils_1.RemoteLineParser([/create a (?:pull|merge) request/i, /\s(https?:\/\/\S+)$/], (result, [pullRequestUrl]) => {
        result.remoteMessages.pullRequestUrl = pullRequestUrl;
    }),
    new utils_1.RemoteLineParser([/found (\d+) vulnerabilities.+\(([^)]+)\)/i, /\s(https?:\/\/\S+)$/], (result, [count, summary, url]) => {
        result.remoteMessages.vulnerabilities = {
            count: utils_1.asNumber(count),
            summary,
            url,
        };
    }),
];
function parsePush(text) {
    const summary = {
        pushed: [],
        remoteMessages: {
            all: [],
        },
    };
    utils_1.parseLinesWithContent(summary, parsers, text);
    return summary;
}
exports.parsePush = parsePush;
//# sourceMappingURL=PushSummary.js.map